version: '3.8'

services:
  auth-service:
    build: 
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@auth-db:5432/auth_db
      - JWT_SECRET=your-secret-key
      - JWT_ALGORITHM=HS256
    depends_on:
      auth-db:
        condition: service_healthy

  event-catalog-service:
    build:
      context: ./event-catalog-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - MONGODB_URL=mongodb://event-catalog-db:27017
      - JWT_SECRET=your-secret-key
      - JWT_ALGORITHM=HS256
      - AUTH_SERVICE_URL=http://auth-service:8001
      - BOOKING_SERVICE_URL=http://booking-service:8003
    depends_on:
      event-catalog-db:
        condition: service_healthy

  booking-service:
    build:
      context: ./booking-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - CASSANDRA_HOSTS=booking-db
      - REDIS_URL=redis://booking-redis:6379/0
      - AUTH_SERVICE_URL=http://auth-service:8001
      - EVENT_SERVICE_URL=http://event-catalog-service:8002
      - NOTIFICATION_SERVICE_URL=http://notification-service:8004
    depends_on:
      booking-db:
        condition: service_healthy
      booking-redis:
        condition: service_healthy

  # notification-service:
  #   build:
  #     context: ./notification-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8004:8004"
  #   environment:
  #     - MONGODB_URL=mongodb://notification-db:27017
  #     - DATABASE_NAME=notification_db
  #     - RABBITMQ_URL=amqp://rabbitmq:5672
  #   depends_on:
  #     notification-db:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy

  # Databases
  auth-db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth_db
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  event-catalog-db:
    image: mongo:6
    volumes:
      - event-catalog-db-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  booking-db:
    image: cassandra:4
    volumes:
      - booking-db-data:/var/lib/cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra", "-e describe keyspaces"]
      interval: 5s
      timeout: 5s
      retries: 5

  # notification-db:
  #   image: mongo:6
  #   volumes:
  #     - notification-db-data:/data/db
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  # Additional Services
  booking-redis:
    image: redis:7
    volumes:
      - booking-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # rabbitmq:
  #   image: rabbitmq:3-management
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   volumes:
  #     - rabbitmq-data:/var/lib/rabbitmq
  #   healthcheck:
  #     test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

volumes:
  auth-db-data:
  event-catalog-db-data:
  booking-db-data:
  # notification-db-data:
  booking-redis-data:
  # rabbitmq-data: 